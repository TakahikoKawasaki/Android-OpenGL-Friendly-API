                Android OpenGL Friendly API

Purpose
-------

The purpose of this project is to provide Java API for Android
that is much more intuitively understandable than the low-level
OpenGL ES API.

To be concrete, for example, creating a shader program with a
vertex shader and a fragment shader and using the program can
be written like the following with the API provided by this
project:

    Program program =
        new Program(
            new VertexShader("...").setAutoDeleted(true),
            new FragmentShader("...").setAutoDeleted(true)
        );

    program.use();
    program.delete();

instead of the code like below with the low-level OpenGL ES API.

    int vShader = GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);
    GLES20.glShaderSource(vShader, "...");
    GLES20.glCompileShader(vShader);

    int fShader = GLES20.glCreateShader(GLES20.GL_FRAGMENT_SHADER);
    GLES20.glShaderSource(fShader, "...");
    GLES20.glCompileShader(fShader);

    int program = GLES20.glCreateProgram();
    GLES20.glAttachShader(program, vShader);
    GLES20.glAttachShader(program, fShader);
    GLES20.glLinkProgram(program);

    GLES20.glUseProgram(program);

    GLES20.glDetachShader(program, vShader);
    GLES20.glDeleteShader(vShader);

    GLES20.glDetachShader(program, fShader);
    GLES20.glDeleteShader(fShader);

    GLES20.glDeleteProgram(program);


Supported OpenGL ES Versions
----------------------------

The main target version is OpenGL ES 2.0.

As the internal implementation carefully avoids referring to
android.opengl.GLES?? classes directly, in other words, as an
instance of an implementation of GLES interface is created by
reflection via GLESFactory, a JAR file of this project will
not raise any link error even if android.opengl.GLES20 class
is not available (this is true on Android 2.1 and older).
However, the purpose of the mechanism is for not backward but
forward compatibility and so OpenGL ES 1.1 is supported only
partially.


Current Status of Development
-----------------------------

Just started on April 14, 2012, so there are many OpenGL ES
features that are not covered by this project yet.


TODO
----

- Add high-level API like M3G.
- Add asset loaders.


--------------------
2012-May-16
Takahiko Kawasaki